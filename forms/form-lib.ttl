# baseURI: http://onto.fel.cvut.cz/ontologies/form-lib
# imports: http://onto.fel.cvut.cz/ontologies/form
# imports: http://spinrdf.org/spin

@prefix fl: <http://onto.fel.cvut.cz/ontologies/form-lib/> .
@prefix form: <http://onto.fel.cvut.cz/ontologies/form> .
@prefix form-lt: <http://onto.fel.cvut.cz/ontologies/form-layout/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://onto.fel.cvut.cz/ontologies/form-lib>
  a owl:Ontology ;
  owl:imports <http://onto.fel.cvut.cz/ontologies/form> ;
  owl:imports <http://spinrdf.org/spin> ;
.
fl:capitalize-first-letter
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:text """SELECT ?langCapitalizedString
WHERE {
    BIND (CONCAT(UCASE(SUBSTR(?arg1, 1, 1)), SUBSTR(?arg1, 2)) AS ?capitalizedString) .
    BIND (IF(lang(?arg1), STRLANG(str(?capitalizedString), lang(?arg1)), ?capitalizedString) AS ?langCapitalizedString) .
}""" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "String whose first letter should be capitalized." ;
    ] ;
  rdfs:comment "Capitalize first letter of a provided string." ;
  rdfs:subClassOf spin:Functions ;
.
fl:create-a
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:text """SELECT ?answer
WHERE {
    BIND (URI(CONCAT(str(?arg1), \"-\", \"a\")) AS ?answer) .
}""" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Object that this answer describes." ;
    ] ;
  rdfs:comment "Generate answer based on object it originates from." ;
  rdfs:subClassOf spin:Functions ;
.
fl:create-q
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:text """SELECT ?question
WHERE {
    BIND(COALESCE(CONCAT(str(?arg2),\"-\"),\"\") as ?uniqueId)
    BIND(URI(CONCAT(str(?arg1), \"-\", ?uniqueId, \"q\")) AS ?question)
}""" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Object that this question describes." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      rdfs:comment "Additional identifier that makes this question unique. This parameter is optional." ;
    ] ;
  rdfs:comment "Generate question based on object it originates from." ;
  rdfs:subClassOf spin:Functions ;
.
fl:create-qo
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:text """SELECT ?originEntity
WHERE {
    BIND (URI(CONCAT(str(?arg1), \"-\", \"qo\")) AS ?originEntity) .
}""" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Entity that was used to create this origin." ;
    ] ;
  rdfs:comment "Generate question origin based on entity it originates from." ;
  rdfs:subClassOf spin:Functions ;
.
fl:create-qt
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:text """SELECT ?questionTemplate
WHERE {
    BIND(IF(?arg2, CONCAT(str(?arg2),\"-\"),\"\") as ?uniqueId)
    BIND (URI(CONCAT(str(?arg1), \"-\", ?uniqueId, \"qt\")) AS ?questionTemplate) .
}""" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Entity that this question template describes." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      rdfs:comment "Additional identifier that makes this question template unique. This parameter is optional." ;
    ] ;
  rdfs:comment "Generate question template based on entity it originates from." ;
  rdfs:subClassOf spin:Functions ;
.
